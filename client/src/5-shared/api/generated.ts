/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export type BlockListControllerGetListParams = {
  q?: string;
};

export type AddBlockItemDtoType =
  (typeof AddBlockItemDtoType)[keyof typeof AddBlockItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddBlockItemDtoType = {
    KeyWord: "KeyWord",
    Website: "Website",
} as const;

export interface AddBlockItemDto {
  data: string;
  type: AddBlockItemDtoType;
}

export type BlockItemDtoType =
  (typeof BlockItemDtoType)[keyof typeof BlockItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlockItemDtoType = {
    KeyWord: "KeyWord",
    Website: "Website",
} as const;

export interface BlockItemDto {
  blockListId: number;
  createdAt: string;
  data: string;
  id: number;
  type: BlockItemDtoType;
}

export interface BlockListDto {
  id: number;
  items: BlockItemDto[];
  ownerId: number;
}

export interface PatchAccountDto {
  isBlockingEnabled?: boolean;
}

export interface AccountDto {
  id: number;
  isBlockingEnabled: boolean;
  ownerId: number;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface HelloWorldDto {
  message: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const appControllerGetHello = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<HelloWorldDto>({ url: `/`, method: "GET" }, options);
};

export const authControllerSignUp = (
    signInBodyDto: BodyType<SignInBodyDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        {
            url: `/auth/sign-up`,
            method: "POST",
            headers: { "Content-Type": "application/json" },
            data: signInBodyDto,
        },
        options,
    );
};

export const authControllerSingIn = (
    signInBodyDto: BodyType<SignInBodyDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        {
            url: `/auth/sign-in`,
            method: "POST",
            headers: { "Content-Type": "application/json" },
            data: signInBodyDto,
        },
        options,
    );
};

export const authControllerSignOut = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<void>(
        { url: `/auth/sign-out`, method: "POST" },
        options,
    );
};

export const authControllerGetSessionInfo = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GetSessionInfoDto>(
        { url: `/auth/session`, method: "GET" },
        options,
    );
};

export const accountControllerGetAccount = (
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<AccountDto>(
        { url: `/account`, method: "GET" },
        options,
    );
};

export const accountControllerPatchAccount = (
    patchAccountDto: BodyType<PatchAccountDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<AccountDto>(
        {
            url: `/account`,
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            data: patchAccountDto,
        },
        options,
    );
};

export const blockListControllerGetList = (
    params?: BlockListControllerGetListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<BlockListDto>(
        { url: `/block-list`, method: "GET", params },
        options,
    );
};

export const blockListControllerAddBlockListItem = (
    addBlockItemDto: BodyType<AddBlockItemDto>,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<BlockListDto>(
        {
            url: `/block-list/item`,
            method: "POST",
            headers: { "Content-Type": "application/json" },
            data: addBlockItemDto,
        },
        options,
    );
};

export const blockListControllerRemoveBlockListItem = (
    id: number,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<unknown>(
        { url: `/block-list/item/${id}`, method: "DELETE" },
        options,
    );
};

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSingInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSingIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerPatchAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchAccount>>
>;
export type BlockListControllerGetListResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerGetList>>
>;
export type BlockListControllerAddBlockListItemResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerAddBlockListItem>>
>;
export type BlockListControllerRemoveBlockListItemResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerRemoveBlockListItem>>
>;
